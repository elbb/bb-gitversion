resource_types:
  - name: email
    type: docker-image
    source:
      repository: icsdm.azurecr.io/clone/pcfseceng/email-resource
      username: ((ics_dm_registry_user))
      password: ((ics_dm_registry_password))
      tag: 1.0.19

resources:
  - name: source
    type: git
    source:
      uri: ((git_source))
      private_key: ((privatekey))
      branch: ((git_branch))
      skip_ssl_verification: ((git_skip_ssl_verification))

  - name: image-bb-gitversion-tool
    type: docker-image
    source:
      repository: elbb/bb-gitversion
      username: ((docker_io_registry_user))
      password: ((docker_io_registry_password))
      tag: ((bb_gitversion_version))
    check_every: never

  - name: image-((bb_name))
    type: docker-image
    source:
      repository: ((bb_docker_namespace))/((bb_name))
      username: ((docker_io_registry_user))
      password: ((docker_io_registry_password))
      insecure_registries: ((bb_insecure_registries))

  - name: send-an-email
    type: email
    source:
      smtp:
        host: ((email_smtp_host_url))
        port: ((email_smtp_port))
        anonymous: ((email_smtp_anonymous))
        username: ((email_smtp_user))
        password: ((email_smtp_pw))
        skip_ssl_validation: ((email_smtp_skip_ssl_validation))
        ca_cert: ((email_smtp_ca_cert))
        host_origin: ((email_smtp_host_origin))
        login_auth: ((email_smtp_login_auth))
      from:  ((email_from))
      to: ((email_to))
    check_every: never
email_success_notification: &email_success_notification
  put: send-an-email
  params:
    subject_text: "ci ${BUILD_PIPELINE_NAME}: build ${BUILD_ID} successfully finished"
    body_text: |
      Yeah!
      Build ID: "${BUILD_ID}"
      Build Name: "${BUILD_NAME}"
      Build Job Name: "${BUILD_JOB_NAME}"
      Build Pipeline Name: "${BUILD_PIPELINE_NAME}"
      ATC External URL: "${ATC_EXTERNAL_URL}"
email_failure_notification: &email_failure_notification
  put: send-an-email
  params:
    subject_text: "ci ${BUILD_PIPELINE_NAME}: build ${BUILD_ID} failed!"
    body_text: |
      Oh no!
      Build ID: "${BUILD_ID}"
      Build Name: "${BUILD_NAME}"
      Build Job Name: "${BUILD_JOB_NAME}"
      Build Pipeline Name: "${BUILD_PIPELINE_NAME}"
      ATC External URL: "${ATC_EXTERNAL_URL}"
email_error_notification: &email_error_notification
  put: send-an-email
  params:
    subject_text: "ci ${BUILD_PIPELINE_NAME}: build ${BUILD_ID} error!"
    body_text: |
      Oh no!
      Build ID: "${BUILD_ID}"
      Build Name: "${BUILD_NAME}"
      Build Job Name: "${BUILD_JOB_NAME}"
      Build Pipeline Name: "${BUILD_PIPELINE_NAME}"
      ATC External URL: "${ATC_EXTERNAL_URL}"
email_abort_notification: &email_abort_notification
  put: send-an-email
  params:
    subject_text: "ci ${BUILD_PIPELINE_NAME}: build ${BUILD_ID} aborted!"
    body_text: |
      Oh no!
      Build ID: "${BUILD_ID}"
      Build Name: "${BUILD_NAME}"
      Build Job Name: "${BUILD_JOB_NAME}"
      Build Pipeline Name: "${BUILD_PIPELINE_NAME}"
      ATC External URL: "${ATC_EXTERNAL_URL}"

jobs:
  - name: build-and-deploy-((bb_name))
    public: true
    on_failure: *email_failure_notification
    on_success: *email_success_notification
    on_abort: *email_abort_notification
    on_error: *email_error_notification
    plan:
      - in_parallel:
          - get: source
            trigger: true
          - get: image-bb-gitversion-tool

      - task: generate-version
        image: image-bb-gitversion-tool
        config:
          platform: linux
          inputs:
            - name: source
          outputs:
            - name: gitversion
          run:
            path: /bin/bash
            args:
              - -exc
              - |
                entrypoint.sh
          params:
            GIT_PATH: source
            GEN_PATH: gitversion
            GIT_BRANCH: "((git_branch))"
            DEFAULT_BRANCH: "((default_branch))"
            VERBOSE: 1

      - put: image-((bb_name))
        params:
          build: source/gitversion
          dockerfile: source/gitversion/Dockerfile
          tag_as_latest: ((bb_release_as_latest))
          tag_file: gitversion/plain/FullSemVerDockerLabel

      - task: regression-test
        image: image-((bb_name))
        config:
          platform: linux
          run:
            path: /bin/bash
            args:
              - -exc
              - |
                # create test repo with commit
                mkdir test
                cd test
                git config --global user.email "you@example.com"
                git config --global user.name "Your Name"
                git init
                git checkout -b main
                touch foo
                git add foo
                git commit -a -m "foo commited"
                # generate gitversion
                export GIT_PATH=$(pwd)
                cd ..
                mkdir gen
                export GEN_PATH=$(pwd)/gen
                cd ${GIT_PATH}

                function test_version () {
                  entrypoint.sh
                  FullSemVerDockerLabel=$(jq .FullSemVerDockerLabel ${GEN_PATH}/json/gitversion.json | xargs)
                  if [ "${1}" != "${FullSemVerDockerLabel}" ]; then
                    echo "found unexpected version: FullSemVerDockerLabel=${FullSemVerDockerLabel}"
                    echo "expected version: ${1}"
                    exit 1
                  fi
                }

                test_version "0.1.0-0"

                git tag "0.2.0"
                test_version "0.2.0"

                git checkout -b foobar
                touch bar
                git add bar
                git commit -a -m "bar commited"
                test_version "0.2.0-foobar.1"

                git checkout -b foo/bar
                test_version "0.2.0-foo-bar.1"

                touch foobar
                git add foobar
                git commit -a -m "foobar commited"
                test_version "0.2.0-foo-bar.2"
